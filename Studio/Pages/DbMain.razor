@page "/dbMain/{DbName}"
@inject IDriver _driver

<div class="row">
    <div class="col-md-6">
        <div class="row g-2 align-items-center">
            <div class="col-auto">
                <h1>Классы:</h1>
            </div>
            <div class="col-auto">
                @if (_formClass)
                {
                    <div class="d-flex flex-row">
                        <input type="text" class="form-control mr-2" @bind="_className" />
                        <button class="btn btn-primary" @onclick="CreateClass">Добавить</button>
                    </div>
                }
                else
                {
                    <button class="btn btn-outline-primary " @onclick="ShowClassForm">Добавить класс</button>
                }
            </div>
        </div>
        @foreach (string className in _classNames)
        {
            <ClassControl ClassName=@className></ClassControl>
        }
    </div>
    <div class="col-md-6">
        <div class="row g-2 align-items-center">
            <div class="col-auto">
                <h1>Отношения:</h1>
            </div>
            <div class="col-auto">
                @if (_formRel)
                {
                    <div class="d-flex flex-row">
                        <input type="text" class="form-control mr-2" @bind="_relName" />
                        <button class="btn btn-primary" @onclick="CreateRel">Добавить</button>
                    </div>
                }
                else
                {
                    <button class="btn btn-outline-primary " @onclick="ShowRelForm">Добавить отношение</button>
                }
            </div>
        </div>
        @foreach (string relName in _relNames)
        {
            <RelControl RelName=@relName DbName=@DbName></RelControl>
        }
    </div>
</div>
@code{
    [Parameter]
    public string DbName { get; set; }


    private bool _formClass = false;
    private string _className = "";
    private List<string> _classNames = new List<string>();

    private bool _formRel = false;
    private string _relName = "";
    private List<string> _relNames = new List<string>();

    protected override void OnInitialized()
    {
        GetClassNames();
        GetRelNames();
    }

    private async void GetClassNames()
    {
        _classNames = new List<string>();
        IResultCursor cursor;
        IAsyncSession session = _driver.AsyncSession(c => c.WithDatabase(DbName));
        try
        {
            cursor = await session.RunAsync(@"MATCH (n) where labels(n) return labels(n)");
            var list = await cursor.ToListAsync();
            foreach (IRecord record in list)
            {
                var value = record.Values.Where(r => r.Key == "labels(n)").FirstOrDefault();
                var name = value.Value.As<List<string>>()[0];
                if (!_classNames.Contains(name))
                    _classNames.Add(name);
            }
        }
        finally
        {
            await session.CloseAsync();
        }
        StateHasChanged();
    }

    private async void CreateClass()
    {
        if (_className == "")
            return;

        IResultCursor cursor;
        IAsyncSession session = _driver.AsyncSession(c => c.WithDatabase(DbName));
        try
        {
            cursor = await session.RunAsync(@$"CREATE (n:{_className}"+"{title:\""+$"{_className}"+"\"})");
        }
        finally
        {
            await session.CloseAsync();
        }

        _className = "";
        _formClass = false;

        GetClassNames();
    }

    private void ShowClassForm() => _formClass = true;

    private async void GetRelNames()
    {
        _relNames = new List<string>();
        IResultCursor cursor;
        IAsyncSession session = _driver.AsyncSession(c => c.WithDatabase(DbName));
        try
        {
            cursor = await session.RunAsync(@"match ()-[r]-() return type(r)");
            var list = await cursor.ToListAsync();
            foreach (IRecord record in list)
            {
                var value = record.Values.Where(r => r.Key == "type(r)").FirstOrDefault();
                var name = value.Value.As<string>();
                if (!_relNames.Contains(name))
                    _relNames.Add(name);
            }
        }
        finally
        {
            await session.CloseAsync();
        }
        StateHasChanged();
    }

    private async void CreateRel()
    {
        if (_relName == "")
            return;

        IResultCursor cursor;
        IAsyncSession session = _driver.AsyncSession(c => c.WithDatabase(DbName));
        try
        {
            string query = @$"CREATE ()-[r:{_relName}]->()";
            cursor = await session.RunAsync(query);
        }
        finally
        {
            await session.CloseAsync();
        }

        _relName = "";
        _formRel = false;

        GetRelNames();
    }

    private void ShowRelForm() => _formRel = true;
}